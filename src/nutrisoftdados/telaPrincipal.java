package nutrisoftdados;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Paciente;
import java.awt.event.KeyEvent;

/**
 *
 * @author keyne
 */
public final class telaPrincipal extends javax.swing.JFrame {

    private final String[] tableColumns = {"NOME", "IDADE", "SISTÓLICA", "DIASTÓLICA", "ESTRESSADO?", "DATA", "HORA"};

    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);

    private final List<Paciente> pacienteList = new ArrayList<>();

    private static final String caminho = "C://Informacoes//consulta.csv.";

    /**
     * Creates new form telaPrincipal
     */
    public telaPrincipal() {
        initComponents();
        gravarEmArquivo();
        Atalhos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LpaneDados = new javax.swing.JLayeredPane();
        lblData = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        lblSystolica = new javax.swing.JLabel();
        txtSystolica = new javax.swing.JTextField();
        lblDiastolica = new javax.swing.JLabel();
        txtDiastolica = new javax.swing.JTextField();
        boxEstresse = new javax.swing.JCheckBox();
        lblNome = new javax.swing.JLabel();
        lblIdade = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtIdade = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        LpaneInfomacoes = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInformacoes = new javax.swing.JTable();
        btnExcluir = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NUTRISOFT");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        LpaneDados.setBackground(new java.awt.Color(0, 51, 102));
        LpaneDados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DADOS PARA CONSULTA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT", 0, 24), new java.awt.Color(0, 51, 102))); // NOI18N
        LpaneDados.setForeground(new java.awt.Color(0, 0, 0));

        lblData.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 36)); // NOI18N
        lblData.setLabelFor(txtData);
        lblData.setText("Data");

        lblHora.setFont(lblData.getFont());
        lblHora.setLabelFor(txtHora);
        lblHora.setText("Hora");

        lblSystolica.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 36)); // NOI18N
        lblSystolica.setLabelFor(txtSystolica);
        lblSystolica.setText("SYS");

        txtSystolica.setFont(new java.awt.Font("Tw Cen MT", 0, 48)); // NOI18N
        txtSystolica.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtSystolica.setToolTipText("Digite a pressão Systólica");
        txtSystolica.setAlignmentX(5.0F);
        txtSystolica.setAlignmentY(100.0F);

        lblDiastolica.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 36)); // NOI18N
        lblDiastolica.setLabelFor(txtDiastolica);
        lblDiastolica.setText("DIA ");

        txtDiastolica.setFont(new java.awt.Font("Tw Cen MT", 0, 48)); // NOI18N
        txtDiastolica.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtDiastolica.setToolTipText("Digite a pressão Diastólica");
        txtDiastolica.setAlignmentX(5.0F);
        txtDiastolica.setAlignmentY(100.0F);

        boxEstresse.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        boxEstresse.setText("Está em situação de estresse?");
        boxEstresse.setToolTipText("Marque se estivr em situação de Estresse");

        lblNome.setFont(lblData.getFont());
        lblNome.setLabelFor(txtNome);
        lblNome.setText("Nome");

        lblIdade.setFont(lblData.getFont());
        lblIdade.setLabelFor(txtIdade);
        lblIdade.setText("Idade");

        txtNome.setFont(new java.awt.Font("Sitka Subheading", 0, 18)); // NOI18N
        txtNome.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtNome.setToolTipText("Digite seu nome");
        txtNome.setActionCommand("<Not Set>");

        txtIdade.setFont(new java.awt.Font("Sitka Subheading", 0, 18)); // NOI18N
        txtIdade.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtIdade.setToolTipText("Digite sua Idade");
        txtIdade.setAlignmentX(5.0F);
        txtIdade.setAlignmentY(100.0F);
        txtIdade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdadeActionPerformed(evt);
            }
        });

        jLabel7.setLabelFor(txtSystolica);
        jLabel7.setText(" mmHg    ");

        jLabel8.setLabelFor(txtDiastolica);
        jLabel8.setText(" mmHg    ");

        txtData.setFont(new java.awt.Font("Sitka Subheading", 0, 18)); // NOI18N
        txtData.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtData.setToolTipText("Digite a data de aferição");
        txtData.setAlignmentX(5.0F);
        txtData.setAlignmentY(100.0F);

        txtHora.setFont(new java.awt.Font("Sitka Subheading", 0, 18)); // NOI18N
        txtHora.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtHora.setToolTipText("Digite a hora de aferição");
        txtHora.setAlignmentX(5.0F);
        txtHora.setAlignmentY(100.0F);

        btnSalvar.setBackground(new java.awt.Color(0, 51, 102));
        btnSalvar.setFont(new java.awt.Font("Serif", 0, 36)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(255, 255, 255));
        btnSalvar.setText("Salvar");
        btnSalvar.setNextFocusableComponent(btnLimpar);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        LpaneDados.setLayer(lblData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(lblHora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(lblSystolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtSystolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(lblDiastolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtDiastolica, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(boxEstresse, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(lblNome, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(lblIdade, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtNome, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtIdade, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtData, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(txtHora, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneDados.setLayer(btnSalvar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout LpaneDadosLayout = new javax.swing.GroupLayout(LpaneDados);
        LpaneDados.setLayout(LpaneDadosLayout);
        LpaneDadosLayout.setHorizontalGroup(
            LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LpaneDadosLayout.createSequentialGroup()
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LpaneDadosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LpaneDadosLayout.createSequentialGroup()
                                .addComponent(lblNome)
                                .addGap(11, 11, 11)
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(LpaneDadosLayout.createSequentialGroup()
                                .addComponent(lblIdade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(LpaneDadosLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LpaneDadosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LpaneDadosLayout.createSequentialGroup()
                                .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LpaneDadosLayout.createSequentialGroup()
                                .addComponent(lblHora)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 20, Short.MAX_VALUE))
            .addGroup(LpaneDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxEstresse, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LpaneDadosLayout.createSequentialGroup()
                            .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblDiastolica)
                                .addComponent(jLabel8))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtDiastolica))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, LpaneDadosLayout.createSequentialGroup()
                            .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblSystolica)
                                .addComponent(jLabel7))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtSystolica, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        LpaneDadosLayout.setVerticalGroup(
            LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LpaneDadosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNome)
                    .addComponent(lblNome))
                .addGap(18, 18, 18)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblHora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LpaneDadosLayout.createSequentialGroup()
                        .addComponent(lblSystolica, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(txtSystolica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(LpaneDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LpaneDadosLayout.createSequentialGroup()
                        .addComponent(lblDiastolica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addComponent(txtDiastolica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(boxEstresse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        txtNome.getAccessibleContext().setAccessibleName("Nome");

        LpaneInfomacoes.setBackground(new java.awt.Color(0, 51, 102));
        LpaneInfomacoes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "INFORMAÇÕES DO PACIENTE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tw Cen MT", 0, 24), new java.awt.Color(0, 51, 102))); // NOI18N

        tblInformacoes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tblInformacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "NOME", "IDADE", "SISTÓLICA", "DIASTÓLICA", "ESTRESSADO?", "DATA", "HORA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblInformacoes.setToolTipText("Tabela com as informações gerais");
        tblInformacoes.setGridColor(new java.awt.Color(0, 51, 102));
        tblInformacoes.setRowHeight(30);
        tblInformacoes.setSelectionForeground(new java.awt.Color(0, 51, 102));
        tblInformacoes.setShowVerticalLines(true);
        jScrollPane2.setViewportView(tblInformacoes);
        tblInformacoes.getAccessibleContext().setAccessibleName("Colunade Dados");

        btnExcluir.setBackground(new java.awt.Color(0, 51, 102));
        btnExcluir.setFont(new java.awt.Font("Serif", 0, 36)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(255, 255, 255));
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(0, 51, 102));
        btnLimpar.setFont(new java.awt.Font("Serif", 0, 36)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpar.setText("Limpar ");
        btnLimpar.setNextFocusableComponent(btnExcluir);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        LpaneInfomacoes.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneInfomacoes.setLayer(btnExcluir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        LpaneInfomacoes.setLayer(btnLimpar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout LpaneInfomacoesLayout = new javax.swing.GroupLayout(LpaneInfomacoes);
        LpaneInfomacoes.setLayout(LpaneInfomacoesLayout);
        LpaneInfomacoesLayout.setHorizontalGroup(
            LpaneInfomacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LpaneInfomacoesLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnLimpar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(LpaneInfomacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LpaneInfomacoesLayout.setVerticalGroup(
            LpaneInfomacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LpaneInfomacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LpaneInfomacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(LpaneDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(LpaneInfomacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(LpaneDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(LpaneInfomacoes))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (!emptyFields()) {
            if (!validarCampo()) {
                inserirPaciente();
                atualizarTabela();
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtIdadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdadeActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparTabela();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        excluirPaciente(getPosicaoPaciente());
        atualizarTabela();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        evt.setKeyCode(KeyEvent.VK_F4);  // Evento com a responsabilidade de fechar tela usando ALT+F4
    }//GEN-LAST:event_formKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane LpaneDados;
    private javax.swing.JLayeredPane LpaneInfomacoes;
    private javax.swing.JCheckBox boxEstresse;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDiastolica;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblIdade;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblSystolica;
    private javax.swing.JTable tblInformacoes;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDiastolica;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtIdade;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSystolica;
    // End of variables declaration//GEN-END:variables

    // Método com a responsabilidade de gravar informações em arquivo CSV divididas por ponto e vírgula.
    public void gravarEmArquivo() {
        try {

            File obj = new File(caminho);
            obj.createNewFile();

            Scanner Reader = new Scanner(obj);

            while (Reader.hasNextLine()) {
                String linhaCompleta = Reader.nextLine();
                List<String> linhaQuebrada = Arrays.asList(linhaCompleta.split(";"));

                Paciente paciente = new Paciente();
                paciente.setNome(linhaQuebrada.get(0));
                paciente.setIdade(Integer.parseInt(linhaQuebrada.get(1)));
                paciente.setSystolica(Integer.parseInt(linhaQuebrada.get(2)));
                paciente.setDiastolica(Integer.parseInt(linhaQuebrada.get(3)));
                paciente.setEstressado(linhaQuebrada.get(4));
                paciente.setData(linhaQuebrada.get(5));
                paciente.setHora(linhaQuebrada.get(6));

                pacienteList.add(paciente);
            }

            atualizarTabela();
            Reader.close();

        } catch (FileNotFoundException e) {
            System.out.println("Arquivo não encontrado" + e.getMessage());
        } catch (IOException ex) {
            System.out.println("Arquivo já existe" + ex.getMessage());
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Problema de index" + ex.getMessage());
        }

    }

    // Método com a responsabilidade de inserir paciente na lista de pacientes.
    private void inserirPaciente() {

        Paciente paciente = new Paciente();
        paciente.setNome(txtNome.getText());
        paciente.setIdade(Integer.parseInt(txtIdade.getText()));
        paciente.setSystolica(Integer.parseInt(txtSystolica.getText()));
        paciente.setDiastolica(Integer.parseInt(txtDiastolica.getText()));
        if (boxEstresse.isSelected()) {
            paciente.setEstressado("Sim");
        } else {
            paciente.setEstressado("Não");
        }
        paciente.setData(txtData.getText());
        paciente.setHora(txtHora.getText());

        pacienteList.add(paciente);
        limparCampos();

    }

    // Método com a responsabilidade de atualizar a tabela 
    private void atualizarTabela() {

        String arquivoCSV = "";

        if (!pacienteList.isEmpty()) {

            Paciente paciente;

            tableModel = new DefaultTableModel(tableColumns, 0);

            for (int i = 0; i < pacienteList.size(); i++) {

                paciente = pacienteList.get(i);
                String[] rowData = {paciente.getNome(), Integer.toString(paciente.getIdade()), Integer.toString(paciente.getSystolica()), Integer.toString(paciente.getDiastolica()), paciente.getEstressado(), paciente.getData(), paciente.getHora()};
                arquivoCSV += paciente.getNome() + ";" + Integer.toString(paciente.getIdade()) + ";" + Integer.toString(paciente.getSystolica()) + ";" + Integer.toString(paciente.getDiastolica()) + ";" + paciente.getEstressado() + ";" + paciente.getData() + ";" + paciente.getHora() + "\n";
                tableModel.addRow(rowData);

            }

            tblInformacoes.setModel(tableModel);
        } else {

            tableModel = new DefaultTableModel(tableColumns, 0);
            tblInformacoes.setModel(tableModel);
        }
        try {
            try ( FileWriter writer = new FileWriter(caminho)) {
                writer.append(arquivoCSV);
            }

        } catch (IOException e) {
            System.out.println("Ocorreu algum erro !" + e.getMessage());
        }

    }

    // Método com a responsabilidade de limpar todos os campos de inserção de dados.
    private void limparCampos() {
        txtNome.setText("");
        txtIdade.setText("");
        txtData.setText("");
        txtHora.setText("");
        txtSystolica.setText("");
        txtDiastolica.setText("");
        boxEstresse.setSelected(false);

    }

    // Método com a responsabilidade de verificar se os campos estão vazios.
    private boolean emptyFields() {

        boolean vazio = true;

        if (txtNome.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Campo Nome não pode estar vazio.");
            txtNome.requestFocus();

        } else if (txtIdade.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Campo Idade não pode estar vazio.");
            txtIdade.requestFocus();

        } else if (txtData.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Campo Data não pode estar vazio.");
            txtData.requestFocus();

        } else if (txtHora.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÂO!  Campo Hora da Consulta não pode estar vazio");
            txtHora.requestFocus();

        } else if (txtSystolica.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÂO! Campo Pressão Systólica não pode estar vazio");
            txtSystolica.requestFocus();

        } else if (txtDiastolica.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÂO! Campo Pressão Diastólica não pode estar vazio");
            txtDiastolica.requestFocus();
        } else {

            vazio = false;
        }
        return vazio;
    }

    //Método com a responsabilidade de validar os campos.
    private boolean validarCampo() {
        boolean validado = true;

        boolean dataValida = txtData.getText().matches("[0-9]{2}[.][0-9]{2}[.][0-9]{4}");
        boolean horaValida = txtHora.getText().matches("[0-9]{2}[h][0-9]{2}");
        boolean sysValida = txtSystolica.getText().matches("[0-9]{3}");
        boolean diasValida = txtDiastolica.getText().matches("[0-9]{2}");

        if (dataValida == false) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! O campo data tem que estar no formato: 04.02.1993");
            txtData.requestFocus();

        } else if (horaValida == false) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! O campo hora tem que estar no formato: 19:30");
            txtHora.requestFocus();

        } else if (sysValida == false) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÂO! O campo pressão Systólica tem que estar no formato: 156. Sem nenhuma vírgula ou ponto");
            txtSystolica.requestFocus();

        } else if (diasValida == false) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÂO! O campo pressão Diastólica tem que estar no formato: 86. Sem nenhuma vírgula ou ponto");
            txtDiastolica.requestFocus();

        } else {
            validado = false;
        }
        return validado;

    }

    //Método com a responsabilidade de buscar posiçao do paciente.
    private int getPosicaoPaciente() {

        int posPaciente = tblInformacoes.getSelectedRow();

        if (posPaciente == -1) {
            JOptionPane.showMessageDialog(rootPane, "Selecione um paciente");
        }

        return posPaciente;
    }

    // Método com a responsabilidade de excluir paciente.
    private void excluirPaciente(int posPaciente) {

        if (posPaciente >= 0) {
            String[] options = {"Sim", "Não"};

            int deletar = JOptionPane.showOptionDialog(
                    rootPane,
                    "Tem certeza que deseja excluir esse Paciente?",
                    "EXCLUSÃO DE PACIENTES",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (deletar == 0) {
                pacienteList.remove(posPaciente);
                atualizarTabela();
            } else {
                tblInformacoes.clearSelection();
            }
        }
    }

    // Método com a responsabilidade de limpar a tabela de todos os dados.
    private void limparTabela() {
        tableModel = new DefaultTableModel(tableColumns, 0);
        tblInformacoes.setModel(tableModel);
        pacienteList.clear();
        atualizarTabela();

    }

    // Método com a responsabilidade de aplicar atalhos pelo teclado.
    private void Atalhos() {
        btnSalvar.setMnemonic(KeyEvent.VK_S);
        btnLimpar.setMnemonic(KeyEvent.VK_L);
        btnExcluir.setMnemonic(KeyEvent.VK_E);

    }
}
